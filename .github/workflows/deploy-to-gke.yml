name: Setup, Build, Deploy

on:
  workflow_call:
    secrets:
      GCP_CREDENTIALS_JSON:
        required: true
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      SERVICE_ACCOUNT:
        required: true
      PINECONE_ENVIRONMENT:
        required: true
      GOOGLE_PROJECT_ID:
        required: true
      PROMPT_ID_QUERY_ANALYZER:
        required: true
      PROMPT_ID_FINAL_RESPONSE:
        required: true
      PINECONE_API_KEY:
        required: true
      HF_TOKEN:
        required: true
      GEMINI_API_KEY:
        required: true
      LANGSMITH_API_KEY:
        required: true
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'model-development/src/**'
  #     - '.github/workflows/deploy-to-gke.yml'
  workflow_dispatch:

jobs:
  setup-build-deploy-push:
    permissions:
      contents: 'read'
      id-token: 'write'

    name: Setup, Build, Publish, and Deploy Model
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./model-development/src

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v2'

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      
      - id: 'test-vars'
        run: echo "Cluster name is ${{ vars.GKE_CLUSTER_NAME }}"  

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: 'linkedlens-cluster'
          location: ${{ vars.GCP_REGION }}
      
      - id: 'get-pods'
        run: 'kubectl get pods'

      - name: 'Setup Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud cli'
        run: 'gcloud info'
      
      - name: 'Docker auth'
        run: |-
          gcloud auth configure-docker us-east1-docker.pkg.dev
      
      - name: 'Set Tag name'
        run: echo "COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
      
      - name: Build image
        run: |-
          
          pwd
          docker build . --file ./Dockerfile --tag us-east1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/model-dev:$COMMIT_SHA
          #working-directory: ./model-development/src
      
      - name: Docker push
        run: |-
          echo $COMMIT_SHA
          docker push us-east1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/model-dev:$COMMIT_SHA
      
      - name: Check if ConfigMap exists
        id: check-configmap
        run: |
          kubectl get configmap model-config -n app || echo "result=ConfigMap not found" >> $GITHUB_OUTPUT

      - name: Apply ConfigMap if it doesn't exist
        if: steps.check-configmap.outputs.result == 'ConfigMap not found'
        run: |
          echo "ConfigMap not found. Applying..."
          sed -e "s/__PINECONE_ENVIRONMENT__/${{ secrets.PINECONE_ENVIRONMENT }}/g" \
            -e "s/__GCP_PROJECT_ID__/${{ secrets.GOOGLE_PROJECT_ID }}/g" \
            -e "s/__PROMPT_VERSION_QUERY_ANALYZER__/${{ vars.PROMPT_VERSION_QUERY_ANALYZER }}/g" \
            -e "s/__PROMPT_ID_QUERY_ANALYZER__/${{ secrets.PROMPT_ID_QUERY_ANALYZER }}/g" \
            -e "s/__PROMPT_VERSION_FINAL_RESPONSE__/${{ vars.PROMPT_VERSION_FINAL_RESPONSE }}/g" \
            -e "s/__PROMPT_ID_FINAL_RESPONSE__/${{ secrets.PROMPT_ID_FINAL_RESPONSE }}/g" ../../kubernetes/config.template.yaml > config.yaml
          kubectl apply -f config.yaml -n app

      - name: Check if Secrets exist
        id: check-secrets
        run: |
            kubectl get secrets api-secrets -n app || echo "result=Secrets not found" >> $GITHUB_OUTPUT
  
      - name: Apply Secrets if it doesn't exist
        if: steps.check-secrets.outputs.result == 'Secrets not found'
        run: |
          echo "Secrets not found. Applying..."
          set +x
          echo "PINECONE_API_KEY=$(echo -n '${{ secrets.PINECONE_API_KEY }}' | base64 -w 0)" >> secrets.env
          echo "HF_TOKEN=$(echo -n '${{ secrets.HF_TOKEN }}' | base64)" >> secrets.env
          echo "GEMINI_API_KEY=$(echo -n '${{ secrets.GEMINI_API_KEY }}' | base64)" >> secrets.env
          echo "LANGSMITH_API_KEY=$(echo -n '${{ secrets.LANGSMITH_API_KEY }}' | base64)" >> secrets.env
          cat -A secrets.env
          source secrets.env
          sed -e "s|__PINECONE_API_KEY__|$PINECONE_API_KEY|g" \
            -e "s|__HF_TOKEN__|$HF_TOKEN|g" \
            -e "s|__GEMINI_API_KEY__|$GEMINI_API_KEY|g" \
            -e "s|__LANGSMITH_API_KEY__|$LANGSMITH_API_KEY|g"  ../../kubernetes/secrets.template.yaml > secrets.yaml
          set -x
          kubectl apply -f secrets.yaml -n app

      - name: Apply image tag
        run: |-
          sed -e "s/IMAGE_TAG/$COMMIT_SHA/g" ./kubernetes/deployment.template.yaml > deployment.yaml
      
      - name: Deploy
        run: |-
          kubectl apply -f deployment.yaml --namespace app && \
          kubectl rollout status deployment/model-dev-deployment -n app && \
          kubectl apply -f ./kubernetes/service.yaml --namespace app
      
      - name: Apply HPA
        run: |-
          kubectl apply -f ../../kubernetes/hpa/model-hpa.yaml -n app

      - name: Restart deployment
        run: kubectl rollout restart deployment model-dev-deployment -n app
      
      - name: Cleanup temp files
        run: rm -f secrets.env secrets.yaml config.yaml deployment.yaml
        if: always()

      - name: Check deployed Image Tag
        id: check-deployed-tag
        run: |-
          DEPLOY_SHA=$(kubectl describe deployments/model-dev-deployment -n app | grep Image | sed  -E 's/.*(.......)/\1/g')
          echo $COMMIT_SHA
          echo "Deployed model"
          echo $DEPLOY_SHA
          if [ "$COMMIT_SHA" == "$DEPLOY_SHA" ]; then
            echo "Deployment Succesful.."
          else
            exit 1
          fi
      
  log-model-deployment:
    needs: setup-build-deploy-push
    if: success()
    uses: ./.github/workflows/log-results.yml
    with:
      severity: INFO
      message: 'Deployment of Model version "$(COMMIT_SHA) successful'
      workflow_type: 'Deployment'
      success: true
    secrets:
        GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS_JSON }}
  
  log-failure:
    needs: setup-build-deploy-push
    if: failure()
    uses: ./.github/workflows/log-results.yml
    with:
      severity: ERROR
      message: 'Deployment of Model version "$(COMMIT_SHA) unsuccessful'
      workflow_type: 'Deployment'
      success: false
    secrets:
        GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS_JSON }}
