name: Setup, Build, Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'model-development/src/**'
      - '.github/workflows/deploy-to-gke.yml'
  workflow_dispatch:

jobs:
  setup-build-deploy-push:
    permissions:
      contents: 'read'
      id-token: 'write'

    name: Setup, Build, Publish, and Deploy Model
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./model-development/src

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v2'

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      
      - id: 'test-vars'
        run: echo "Cluster name is ${{ vars.GKE_CLUSTER_NAME }}"  

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: 'linkedlens-cluster'
          location: ${{ vars.GCP_REGION }}
      
      - id: 'get-pods'
        run: 'kubectl get pods'

      - name: 'Setup Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud cli'
        run: 'gcloud info'
      
      - name: 'Docker auth'
        run: |-
          gcloud auth configure-docker us-east1-docker.pkg.dev
      
      - name: 'Set Tag name'
        run: echo "COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
      
      - name: Build image
        run: |-
          
          pwd
          docker build . --file ./Dockerfile --tag us-east1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/model-dev:$COMMIT_SHA
          #working-directory: ./model-development/src
      
      - name: Docker push
        run: |-
          echo $COMMIT_SHA
          docker push us-east1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/model-dev:$COMMIT_SHA
      
      - name: Check if ConfigMap exists
        id: check-configmap
        run: |
          kubectl get configmap model-config -n default || echo "ConfigMap not found"

      - name: Apply ConfigMap if it doesn't exist
        if: steps.check-configmap.outputs.result == 'ConfigMap not found'
        run: |
          echo "ConfigMap not found. Applying..."
          kubectl apply -f ../../kubernetes/config.yaml

      - name: Apply image tag
        run: |-
          sed -e "s/IMAGE_TAG/$COMMIT_SHA/g" ./kubernetes/deployment.template.yaml > deployment.yaml
      
      - name: Deploy
        run: |-
          kubectl apply -f deployment.yaml --namespace app && \
          kubectl rollout status deployment/model-dev-deployment -n default && \
          kubectl apply -f ./kubernetes/service.yaml --namespace app
      
      - name: Restart deployment
        run: kubectl rollout restart deployment model-dev-deployment
      
      - name: Status of deployment
        run: | 
          if ! kubectl rollout status deployment model-dev-deployment; then
            exit 1
          else
            echo "Deployment successful"
